/*
 *  This file is part of CoCalc: Copyright © 2020 Sagemath, Inc.
 *  License: AGPLv3 s.t. "Commons Clause" – see LICENSE.md for details
 */

import * as React from "react";
import { HiddenSM, Icon, Tip } from "../../r_misc";
import { ProjectActions } from "smc-webapp/project_store";
import { Button, ButtonGroup, ButtonToolbar } from "smc-webapp/antd-bootstrap";
import { useStudentProjectFunctionality } from "smc-webapp/course";

interface Props {
  kucalc?: string;
  show_hidden?: boolean;
  show_masked?: boolean;
  public_view?: boolean;
  show_library?: boolean;
  available_features?: { library: boolean };
  actions: ProjectActions;
  project_id: string;
}

export const MiscSideButtons: React.FC<Props> = (props) => {
  const student_project_functionality = useStudentProjectFunctionality(
    props.project_id
  );

  const handle_hidden_toggle = (e: React.MouseEvent): void => {
    e.preventDefault();
    return props.actions.setState({
      show_hidden: !props.show_hidden,
    });
  };

  const handle_masked_toggle = (e: React.MouseEvent): void => {
    e.preventDefault();
    props.actions.setState({
      show_masked: !props.show_masked,
    });
  };

  const handle_backup = (e: React.MouseEvent): void => {
    e.preventDefault();
    props.actions.open_directory(".snapshots");
  };

  function render_hidden_toggle(): JSX.Element {
    const icon = props.show_hidden ? "eye" : "eye-slash";
    return (
      <Button bsSize="small" onClick={handle_hidden_toggle}>
        <Tip title={"Show hidden files"} placement={"bottom"}>
          <Icon name={icon} />
        </Tip>
      </Button>
    );
  }

  function render_masked_toggle(): JSX.Element {
    return (
      <Button
        onClick={handle_masked_toggle}
        active={!props.show_masked}
        bsSize={"small"}
      >
        <Tip title={"Hide autogenerated/temporary files"} placement={"bottom"}>
          <Icon name={"mask"} />
        </Tip>
      </Button>
    );
  }

  function render_backup(): JSX.Element | undefined {
    if (props.public_view || !require("../../customize").commercial) {
      return;
    }
    // NOTE -- snapshots aren't available except in commercial version
    // -- they are complicated nontrivial thing that isn't usually setup...
    return (
      <Button bsSize="small" onClick={handle_backup}>
        <Icon name="life-saver" />{" "}
        <span style={{ fontSize: 12 }} className="hidden-sm">
          Backups
        </span>
      </Button>
    );
  }

  const handle_library_click = (_e: React.MouseEvent): void => {
    props.actions.toggle_library();
  };

  function render_library_button(): JSX.Element | undefined {
    // library only exists on kucalc, for now.
    if (props.kucalc !== "yes") {
      return;
    }
    return (
      <Button bsSize={"small"} onClick={handle_library_click}>
        <Icon name="book" /> <HiddenSM>Library</HiddenSM>
      </Button>
    );
  }

  function render_upload_button(): JSX.Element | undefined {
    if (student_project_functionality.disableUploads) {
      return;
    }
    return (
      <Button bsSize="small" className="upload-button">
        <Icon name="upload" /> <HiddenSM>Upload</HiddenSM>
      </Button>
    );
  }

  return (
    <ButtonToolbar
      style={{ whiteSpace: "nowrap", padding: "0" }}
      className="pull-right"
    >
      <ButtonGroup>
        {(
          props.available_features != null
            ? props.available_features.library
            : undefined
        )
          ? render_library_button()
          : undefined}
        {render_upload_button()}
      </ButtonGroup>
      <div className="pull-right">
        <ButtonGroup>
          {render_hidden_toggle()}
          {render_masked_toggle()}
          {render_backup()}
        </ButtonGroup>
      </div>
    </ButtonToolbar>
  );
};
